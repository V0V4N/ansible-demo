---

- name: Encrypt partition that is next to the root partition
  tags: [encrypt-partition, disk]
  block:
    - name: Get the root (`/`) partition
      ansible.builtin.command: "findmnt -n -o SOURCE /"
      register: root_partition
      changed_when: false
      become: true

    - name: Extract the disk containing root
      ansible.builtin.set_fact:
        root_disk: "{{ root_partition.stdout | regex_replace('p?[0-9]+$', '') }}"

    - name: Get partition table from `fdisk`
      ansible.builtin.command: "fdisk -l {{ root_disk }}"
      register: fdisk_output
      changed_when: false
      become: true

    - name: Find adjacent partition to root using `fdisk`
      ansible.builtin.set_fact:
        adjacent_partitions: "{{ (fdisk_output.stdout_lines
          | select('search', '^/dev/')
          | reject('search', root_partition.stdout)
          | reject('search', 'EFI System|boot|SWAP|BIOS boot')
          | list) }}"

    - name: Show detected adjacent partitions
      ansible.builtin.debug:
        msg: "Candidate partitions: {{ adjacent_partitions }}"

    - name: Fail if no valid adjacent partition is found
      ansible.builtin.fail:
        msg: "No valid adjacent partition found for encryption."
      when: adjacent_partitions | length == 0

    - name: Select the first available partition
      ansible.builtin.set_fact:
        adjacent_partition: "{{ adjacent_partitions[0] }}"

    - name: Show detected adjacent partition
      ansible.builtin.debug:
        msg: "Adjacent partition to encrypt: {{ adjacent_partition }}"

    - name: Check if adjacent partition exists
      ansible.builtin.stat:
        path: "{{ adjacent_partition }}"
      register: adjacent_partition_check
      become: true

    - name: Fail if no valid adjacent partition is found
      ansible.builtin.fail:
        msg: "No valid adjacent partition found for encryption."
      when: not adjacent_partition_check.stat.exists or (adjacent_partition is undefined or adjacent_partition | trim == "")

    - name: Check if the adjacent partition is already encrypted
      ansible.builtin.command: "cryptsetup isLuks {{ adjacent_partition }}"
      register: luks_check
      changed_when: false
      ignore_errors: true
      become: true

    - name: Check if the adjacent partition is mounted
      ansible.builtin.command: "lsblk -n -o MOUNTPOINT {{ adjacent_partition }}"
      register: mount_check
      changed_when: false
      become: true

    - name: Fail if the partition is already mounted
      ansible.builtin.fail:
        msg: "The partition {{ adjacent_partition }} is currently mounted and cannot be encrypted!"
      when: mount_check.stdout is not none and mount_check.stdout | trim | length > 0

    - name: Encrypt the adjacent partition with LUKS2
      ansible.builtin.command:
        cmd: "cryptsetup luksFormat --batch-mode --type luks2 {{ adjacent_partition }}"
        stdin: "{{ luks_password }}"
      become: true
      when: luks_check.rc != 0
      changed_when: true
      no_log: true

    - name: Open the encrypted partition
      ansible.builtin.command:
        cmd: "cryptsetup luksOpen {{ adjacent_partition }} adjacent_encrypted"
        stdin: "{{ luks_password }}"
      become: true
      no_log: true
      changed_when: false

    - name: Check if the encrypted partition already has a filesystem
      ansible.builtin.command: "lsblk -n -o FSTYPE /dev/mapper/adjacent_encrypted"
      register: fs_check
      changed_when: false
      become: true

    - name: Format the encrypted partition as ext4 (if no filesystem exists)
      ansible.builtin.command:
        cmd: "mkfs.ext4 /dev/mapper/adjacent_encrypted"
      become: true
      when: fs_check.stdout | trim | length == 0
      changed_when: false

    - name: Get the UUID of the encrypted partition
      ansible.builtin.command: "blkid -s UUID -o value {{ adjacent_partition }}"
      register: luks_uuid
      changed_when: false
      failed_when: luks_uuid.stdout | trim == ""
      become: true

    - name: Create mount point for encrypted partition
      ansible.builtin.file:
        path: "/mnt/adjacent_encrypted"
        state: directory
        mode: '0755'
      become: true

    - name: Mount the encrypted partition
      ansible.posix.mount:
        path: "/mnt/adjacent_encrypted"
        src: "/dev/mapper/adjacent_encrypted"
        fstype: ext4
        opts: defaults
        state: mounted
      become: true

    - name: Ensure persistence in /etc/crypttab
      ansible.builtin.lineinfile:
        path: /etc/crypttab
        regexp: '^adjacent_encrypted'
        line: "adjacent_encrypted UUID={{ luks_uuid.stdout }} none luks"
        create: true
        mode: '0644'
      become: true

    - name: Ensure persistence in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^/dev/mapper/adjacent_encrypted'
        line: "/dev/mapper/adjacent_encrypted /mnt/adjacent_encrypted ext4 defaults 0 2"
        create: true
        mode: '0644'
      become: true
